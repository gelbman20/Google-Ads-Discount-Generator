const express = require('express');
const path = require('path');
const i18n = require('i18n');
const cookieParser = require('cookie-parser');
const { createDiscountURL } = require('./index.js');

const app = express();
const PORT = process.env.PORT || 3000;

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ i18n
const localesDir = path.join(__dirname, 'locales');
console.log(`üìÅ –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏: ${localesDir}`);

i18n.configure({
  locales: ['en', 'ru', 'de'],
  defaultLocale: 'ru',
  directory: localesDir,
  queryParameter: 'lang',
  sessionParameter: 'lang',
  cookie: 'lang',
  autoReload: true,
  updateFiles: false
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Pug –∫–∞–∫ —à–∞–±–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä–∞
app.set('view engine', 'pug');
app.set('views', path.join(__dirname, 'views'));

// Cookie parser middleware (–Ω—É–∂–µ–Ω –¥–ª—è i18n)
app.use(cookieParser());

// i18n middleware
app.use(i18n.init);

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ä–º
app.use(express.urlencoded({ extended: true }));
app.use(express.json());

// Middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —è–∑—ã–∫–∞ –ò –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö (–ü–û–°–õ–ï body parser)
app.use((req, res, next) => {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: body.lang (–¥–ª—è POST) > query.lang (–¥–ª—è GET)
  const lang = req.body?.lang || req.query.lang;
  if (lang && ['en', 'ru', 'de'].includes(lang)) {
    res.setLocale(lang);
  }
  
  // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ
  res.locals.__ = function(key) {
    try {
      const currentLang = res.getLocale();
      const fs = require('fs');
      const translationFile = path.join(__dirname, 'locales', `${currentLang}.json`);
      const translations = JSON.parse(fs.readFileSync(translationFile, 'utf8'));
      
      // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Ç–∏–ø–∞ 'form.url_label'
      const keys = key.split('.');
      let result = translations;
      for (const k of keys) {
        result = result?.[k];
      }
      return result || key;
    } catch (e) {
      return key;
    }
  };
  
  res.locals.currentLang = res.getLocale();
  res.locals.availableLanguages = [
    { code: 'en', name: 'English' },
    { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
    { code: 'de', name: 'Deutsch' }
  ];
  
  next();
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã (CSS, JS, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
app.use(express.static('public'));

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
app.get('/', (req, res) => {
  res.render('index', {
    title: `üöÄ ${res.__('title')}`
  });
});

// GET –º–∞—Ä—à—Ä—É—Ç –¥–ª—è /generate (–ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —è–∑—ã–∫–∞)
app.get('/generate', (req, res) => {
  const lang = req.query.lang;
  if (lang) {
    res.redirect(`/?lang=${lang}`);
  } else {
    res.redirect('/');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
app.post('/generate', (req, res) => {
  try {
    const { url, price, days, productId, lang } = req.body;
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è (—è–∑—ã–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ middleware)
    if (!url || !price || !days || !productId) {
      throw new Error(res.__('error.validation.all_fields_required'));
    }
    
    const priceNum = parseFloat(price);
    const daysNum = parseInt(days);
    
    if (isNaN(priceNum) || priceNum <= 0) {
      throw new Error(res.__('error.validation.price_positive'));
    }
    
    if (isNaN(daysNum) || daysNum <= 0 || daysNum > 365) {
      throw new Error(res.__('error.validation.days_range'));
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è Product ID (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º)
    if (!/^\d+$/.test(productId)) {
      throw new Error(res.__('error.validation.product_id_invalid'));
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É (—Å–∫–∏–¥–∫–∞ = 0%)
    const generatedLink = createDiscountURL(url, 0, priceNum, daysNum, productId);
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    res.render('result', {
      title: `‚úÖ ${res.__('result.title')}`,
      url: url,
      price: priceNum,
      days: daysNum,
      productId: productId,
      generatedLink: generatedLink
    });
  } catch (error) {
    res.status(400).render('error', {
      title: `‚ùå ${res.__('error.title')}`,
      message: error.message
    });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!');
  console.log('=================');
  console.log(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ –≤ –±—Ä–∞—É–∑–µ—Ä–µ: http://localhost:${PORT}`);
  console.log('‚ú® –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-—Ñ–æ—Ä–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–æ–∫');
  console.log('üîê –ö–ª—é—á–∏ Google –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
  console.log('');
  console.log('üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C');
});

module.exports = app;
