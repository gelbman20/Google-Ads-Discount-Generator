extends layout

block meta
  meta(property='og:title', content='Link successfully generated')
  meta(property='og:description', content='Google Ads link with JWT token ready to use')

block content
  .card-google.p-8.mb-8.animate-bounce-in
    .text-center.mb-8
      .inline-flex.items-center.justify-center.w-16.h-16.bg-green-100.rounded-full.mb-4
        span.text-2xl ✅
      h2.text-3xl.font-bold.text-green-600.mb-2 #{__('result.title')}
      p.text-gray-600 #{__('result.subtitle')}
    
    .grid(class="md:grid-cols-2 lg:grid-cols-4").gap-6.mb-8
      .bg-gradient-to-br.from-blue-50.to-blue-100.p-6.rounded-lg.text-center.border-2.border-blue-200
        .text-2xl.mb-2 🔗
        h3.font-semibold.text-blue-800.mb-2 #{__('result.original_link')}
        p.text-sm.text-blue-600.break-all= url
      
      .bg-gradient-to-br.from-green-50.to-green-100.p-6.rounded-lg.text-center.border-2.border-green-200
        .text-2xl.mb-2 💰
        h3.font-semibold.text-green-800.mb-2 #{__('result.price')}
        p.text-xl.font-bold.text-green-600= price + ' EUR'
      
      .bg-gradient-to-br.from-purple-50.to-purple-100.p-6.rounded-lg.text-center.border-2.border-purple-200
        .text-2xl.mb-2 ⏰
        h3.font-semibold.text-purple-800.mb-2 #{__('result.validity')}
        p.text-xl.font-bold.text-purple-600= days + ' ' + __('result.days')
      
      .bg-gradient-to-br.from-orange-50.to-orange-100.p-6.rounded-lg.text-center.border-2.border-orange-200
        .text-2xl.mb-2 🏷️
        h3.font-semibold.text-orange-800.mb-2 #{__('result.product_id')}
        p.text-xl.font-bold.text-orange-600= productId
    
    .bg-gradient-to-r.from-gray-50.to-gray-100.p-6.rounded-lg.border-2.border-gray-200
      .flex.items-center.justify-between.mb-4
        h3.text-lg.font-semibold.text-gray-800.flex.items-center
          span.mr-2 🚀
          | #{__('result.generated_link_title')}
        button#copyBtn.bg-green-500(class="hover:bg-green-600").text-white.px-4.py-2.rounded-lg.transition-colors.duration-200.flex.items-center
          span.mr-2 📋
          span#copyText #{__('result.copy_button')}
      
      .bg-white.border-2.border-dashed.border-gray-300.p-4.rounded-lg
        code#generatedLink.text-sm.font-mono.text-blue-600.break-all.select-all= generatedLink
    
    .flex.flex-col(class="sm:flex-row").gap-4.mt-8
      a(href='/').btn-google.flex-1.text-center.flex.items-center.justify-center
        span.mr-2 ← 
        | #{__('result.create_new')}
      
      button#shareBtn.bg-gray-600(class="hover:bg-gray-700").text-white.font-medium.py-3.px-6.rounded-lg.transition-colors.duration-200.flex-1.flex.items-center.justify-center
        span.mr-2 📤
        | #{__('result.share')}

block scripts
  script.
    // Translations for JavaScript
    const translations = {
      copyButton: '#{__("result.copy_button")}',
      copied: '#{__("result.copied")}',
      shareTitle: '#{__("result.share_title") || "Google Ads link with discount"}',
      shareText: '#{__("result.share_text") || "Generated link with JWT token"}',
      linkCopied: '#{__("result.link_copied") || "Link copied to clipboard!"}'
    };
    
    // Copy to clipboard function
    function copyToClipboard() {
      const linkText = document.getElementById('generatedLink').textContent;
      const copyBtn = document.getElementById('copyBtn');
      const copyText = document.getElementById('copyText');
      
      navigator.clipboard.writeText(linkText).then(() => {
        copyText.textContent = translations.copied;
        copyBtn.classList.remove('bg-green-500', 'hover:bg-green-600');
        copyBtn.classList.add('bg-green-600', 'copy-success');
        
        setTimeout(() => {
          copyText.textContent = translations.copyButton;
          copyBtn.classList.remove('bg-green-600', 'copy-success');
          copyBtn.classList.add('bg-green-500', 'hover:bg-green-600');
        }, 2000);
      }).catch(() => {
        // Fallback for older browsers
        const textArea = document.createElement('textarea');
        textArea.value = linkText;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
        
        copyText.textContent = translations.copied;
        setTimeout(() => {
          copyText.textContent = translations.copyButton;
        }, 2000);
      });
    }
    
    // Share function
    function shareLink() {
      const linkText = document.getElementById('generatedLink').textContent;
      
      if (navigator.share) {
        navigator.share({
          title: translations.shareTitle,
          text: translations.shareText,
          url: linkText
        });
      } else {
        copyToClipboard();
        alert(translations.linkCopied);
      }
    }
    
    // Event handlers
    document.getElementById('copyBtn').addEventListener('click', copyToClipboard);
    document.getElementById('shareBtn').addEventListener('click', shareLink);
    
    // Result appearance animation
    document.addEventListener('DOMContentLoaded', function() {
      const resultCard = document.querySelector('.animate-bounce-in');
      setTimeout(() => {
        resultCard.classList.add('animate-bounce-in');
      }, 100);
    });
